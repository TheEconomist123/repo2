{"remainingRequest":"D:\\mail\\oesbecc\\outMailScreen\\node_modules\\babel-loader\\lib\\index.js!D:\\mail\\oesbecc\\outMailScreen\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\mail\\oesbecc\\outMailScreen\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\mail\\oesbecc\\outMailScreen\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\mail\\oesbecc\\outMailScreen\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue","mtime":1640070594981},{"path":"D:\\mail\\oesbecc\\outMailScreen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1640070690350},{"path":"D:\\mail\\oesbecc\\outMailScreen\\node_modules\\babel-loader\\lib\\index.js","mtime":1640070643981},{"path":"D:\\mail\\oesbecc\\outMailScreen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1640070690350},{"path":"D:\\mail\\oesbecc\\outMailScreen\\node_modules\\vue-loader\\lib\\index.js","mtime":1640070694148}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\mail\\\\oesbecc\\\\outMailScreen\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.fill\";\nimport _objectSpread from \"D:\\\\mail\\\\oesbecc\\\\outMailScreen\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"D:\\\\mail\\\\oesbecc\\\\outMailScreen\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.sort\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport autoResize from \"../../../mixin/autoResize\";\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvScrollRankingBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      ref: 'scroll-ranking-board',\n      defaultConfig: {\n        /**\n         * @description Board data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n\n        /**\n         * @description Value unit\n         * @type {String}\n         * @default unit = ''\n         * @example unit = 'ton'\n         */\n        unit: '',\n\n        /**\n         * @description Auto sort by value\n         * @type {Boolean}\n         * @default sort = true\n         */\n        sort: true,\n\n        /**\n         * @description Value formatter\n         * @type {Function}\n         * @default valueFormatter = null\n         */\n        valueFormatter: null\n      },\n      mergedConfig: null,\n      rowsData: [],\n      rows: [],\n      heights: [],\n      animationIndex: 0,\n      animationHandler: '',\n      updater: 0\n    };\n  },\n  watch: {\n    config: function config() {\n      var stopAnimation = this.stopAnimation,\n          calcData = this.calcData;\n      stopAnimation();\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit: function afterAutoResizeMixinInit() {\n      var calcData = this.calcData;\n      calcData();\n    },\n    onResize: function onResize() {\n      var mergedConfig = this.mergedConfig,\n          calcHeights = this.calcHeights;\n      if (!mergedConfig) return;\n      calcHeights(true);\n    },\n    calcData: function calcData() {\n      var mergeConfig = this.mergeConfig,\n          calcRowsData = this.calcRowsData;\n      mergeConfig();\n      calcRowsData();\n      var calcHeights = this.calcHeights;\n      calcHeights();\n      var animation = this.animation;\n      animation(true);\n    },\n    mergeConfig: function mergeConfig() {\n      var config = this.config,\n          defaultConfig = this.defaultConfig;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    calcRowsData: function calcRowsData() {\n      var _this$mergedConfig = this.mergedConfig,\n          data = _this$mergedConfig.data,\n          rowNum = _this$mergedConfig.rowNum,\n          sort = _this$mergedConfig.sort;\n      sort && data.sort(function (_ref, _ref2) {\n        var a = _ref.value;\n        var b = _ref2.value;\n        if (a > b) return -1;\n        if (a < b) return 1;\n        if (a === b) return 0;\n      });\n      var value = data.map(function (_ref3) {\n        var value = _ref3.value;\n        return value;\n      });\n      var min = Math.min.apply(Math, _toConsumableArray(value)) || 0; // abs of min\n\n      var minAbs = Math.abs(min);\n      var max = Math.max.apply(Math, _toConsumableArray(value)) || 0; // abs of max\n\n      var maxAbs = Math.abs(max);\n      var total = max + minAbs;\n      data = data.map(function (row, i) {\n        return _objectSpread({}, row, {\n          ranking: i + 1,\n          percent: (row.value + minAbs) / total * 100\n        });\n      });\n      var rowLength = data.length;\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [].concat(_toConsumableArray(data), _toConsumableArray(data));\n      }\n\n      data = data.map(function (d, i) {\n        return _objectSpread({}, d, {\n          scroll: i\n        });\n      });\n      this.rowsData = data;\n      this.rows = data;\n    },\n    calcHeights: function calcHeights() {\n      var onresize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var height = this.height,\n          mergedConfig = this.mergedConfig;\n      var rowNum = mergedConfig.rowNum,\n          data = mergedConfig.data;\n      var avgHeight = height / rowNum;\n      this.avgHeight = avgHeight;\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight);\n    },\n    animation: function () {\n      var _animation = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this$heights;\n\n        var start,\n            avgHeight,\n            animationIndex,\n            mergedConfig,\n            rowsData,\n            animation,\n            updater,\n            waitTime,\n            carousel,\n            rowNum,\n            rowLength,\n            animationNum,\n            rows,\n            back,\n            _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                start = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n                avgHeight = this.avgHeight, animationIndex = this.animationIndex, mergedConfig = this.mergedConfig, rowsData = this.rowsData, animation = this.animation, updater = this.updater;\n                waitTime = mergedConfig.waitTime, carousel = mergedConfig.carousel, rowNum = mergedConfig.rowNum;\n                rowLength = rowsData.length;\n\n                if (!(rowNum >= rowLength)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                if (!start) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 9;\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, waitTime);\n                });\n\n              case 9:\n                if (!(updater !== this.updater)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 11:\n                animationNum = carousel === 'single' ? 1 : rowNum;\n                rows = rowsData.slice(animationIndex);\n                rows.push.apply(rows, _toConsumableArray(rowsData.slice(0, animationIndex)));\n                this.rows = rows.slice(0, rowNum + 1);\n                this.heights = new Array(rowLength).fill(avgHeight);\n                _context.next = 18;\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, 300);\n                });\n\n              case 18:\n                if (!(updater !== this.updater)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 20:\n                (_this$heights = this.heights).splice.apply(_this$heights, [0, animationNum].concat(_toConsumableArray(new Array(animationNum).fill(0))));\n\n                animationIndex += animationNum;\n                back = animationIndex - rowLength;\n                if (back >= 0) animationIndex = back;\n                this.animationIndex = animationIndex;\n                this.animationHandler = setTimeout(animation, waitTime - 300);\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function animation() {\n        return _animation.apply(this, arguments);\n      }\n\n      return animation;\n    }(),\n    stopAnimation: function stopAnimation() {\n      var animationHandler = this.animationHandler,\n          updater = this.updater;\n      this.updater = (updater + 1) % 999999;\n      if (!animationHandler) return;\n      clearTimeout(animationHandler);\n    }\n  },\n  destroyed: function destroyed() {\n    var stopAnimation = this.stopAnimation;\n    stopAnimation();\n  }\n};",{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-scroll-ranking-board\" :ref=\"ref\">\n    <div\n      class=\"row-item\"\n      v-for=\"(item, i) in rows\"\n      :key=\"item.toString() + item.scroll\"\n      :style=\"`height: ${heights[i]}px;`\"\n    >\n      <div class=\"ranking-info\">\n        <div class=\"rank\">No.{{ item.ranking }}</div>\n        <div class=\"info-name\" v-html=\"item.name\" />\n        <div class=\"ranking-value\">{{ mergedConfig.valueFormatter ? mergedConfig.valueFormatter(item) : item.value + mergedConfig.unit }}</div>\n      </div>\n\n      <div class=\"ranking-column\">\n        <div\n          class=\"inside-column\"\n          :style=\"`width: ${item.percent}%;`\"\n        >\n          <div class=\"shine\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollRankingBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-ranking-board',\n\n      defaultConfig: {\n        /**\n         * @description Board data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Value unit\n         * @type {String}\n         * @default unit = ''\n         * @example unit = 'ton'\n         */\n        unit: '',\n        /**\n         * @description Auto sort by value\n         * @type {Boolean}\n         * @default sort = true\n         */\n        sort: true,\n        /**\n         * @description Value formatter\n         * @type {Function}\n         * @default valueFormatter = null\n         */\n        valueFormatter: null\n      },\n\n      mergedConfig: null,\n\n      rowsData: [],\n\n      rows: [],\n\n      heights: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcHeights(true)\n    },\n    calcData () {\n      const { mergeConfig, calcRowsData } = this\n\n      mergeConfig()\n\n      calcRowsData()\n\n      const { calcHeights } = this\n\n      calcHeights()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcRowsData () {\n      let { data, rowNum, sort } = this.mergedConfig\n\n      sort && data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const value = data.map(({ value }) => value)\n      \n      const min = Math.min(...value) || 0\n\n      // abs of min\n      const minAbs = Math.abs(min)\n\n      const max = Math.max(...value) || 0\n\n      // abs of max\n      const maxAbs = Math.abs(max)\n\n      const total = max + minAbs\n\n      data = data.map((row, i) => ({ ...row, ranking: i + 1, percent: (row.value + minAbs) / total * 100 }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig } = this\n\n      const { rowNum, data } = mergedConfig\n\n      const avgHeight = height / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    async animation (start = false) {\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows.slice(0, rowNum + 1)\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src"}]}